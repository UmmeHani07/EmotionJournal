/*
 * OpenAPI-for-emotional-journal
 *
 * Developing API for emotional journal app for assessment
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse2002 : IEquatable<InlineResponse2002>
    { 
        /// <summary>
        /// Gets or Sets Emotion
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum EmotionEnum
        {
            /// <summary>
            /// Enum HappinessEnum for Happiness
            /// </summary>
            [EnumMember(Value = "Happiness")]
            HappinessEnum = 0,
            /// <summary>
            /// Enum CaringEnum for Caring
            /// </summary>
            [EnumMember(Value = "Caring")]
            CaringEnum = 1,
            /// <summary>
            /// Enum DepressionEnum for Depression
            /// </summary>
            [EnumMember(Value = "Depression")]
            DepressionEnum = 2,
            /// <summary>
            /// Enum InadequateEnum for Inadequate
            /// </summary>
            [EnumMember(Value = "Inadequate")]
            InadequateEnum = 3,
            /// <summary>
            /// Enum FearEnum for Fear
            /// </summary>
            [EnumMember(Value = "Fear")]
            FearEnum = 4,
            /// <summary>
            /// Enum ConfusionEnum for Confusion
            /// </summary>
            [EnumMember(Value = "Confusion")]
            ConfusionEnum = 5,
            /// <summary>
            /// Enum HurtEnum for Hurt
            /// </summary>
            [EnumMember(Value = "Hurt")]
            HurtEnum = 6,
            /// <summary>
            /// Enum AngerEnum for Anger
            /// </summary>
            [EnumMember(Value = "Anger")]
            AngerEnum = 7,
            /// <summary>
            /// Enum LonelinessEnum for Loneliness
            /// </summary>
            [EnumMember(Value = "Loneliness")]
            LonelinessEnum = 8,
            /// <summary>
            /// Enum RemorseEnum for Remorse
            /// </summary>
            [EnumMember(Value = "Remorse")]
            RemorseEnum = 9        }

        /// <summary>
        /// Gets or Sets Emotion
        /// </summary>

        [DataMember(Name="emotion")]
        public EmotionEnum? Emotion { get; set; }

        /// <summary>
        /// Gets or Sets Intensity
        /// </summary>

        [DataMember(Name="intensity")]
        public int? Intensity { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>

        [DataMember(Name="timestamp")]
        public string Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2002 {\n");
            sb.Append("  Emotion: ").Append(Emotion).Append("\n");
            sb.Append("  Intensity: ").Append(Intensity).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse2002)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse2002 instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2002 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2002 other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Emotion == other.Emotion ||
                    Emotion != null &&
                    Emotion.Equals(other.Emotion)
                ) && 
                (
                    Intensity == other.Intensity ||
                    Intensity != null &&
                    Intensity.Equals(other.Intensity)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Emotion != null)
                    hashCode = hashCode * 59 + Emotion.GetHashCode();
                    if (Intensity != null)
                    hashCode = hashCode * 59 + Intensity.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse2002 left, InlineResponse2002 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse2002 left, InlineResponse2002 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
