/*
 * OpenAPI-for-emotional-journal
 *
 * Developing API for emotional journal app for assessment
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// Login with email and password.
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Login successful.</response>
        /// <response code="401">Unauthorized.</response>
        [HttpPost]
        [Route("/api/v1/auth/login")]
        [ValidateModelState]
        [SwaggerOperation("AuthLoginPost")]
        public virtual IActionResult AuthLoginPost([FromBody]AuthLoginBody body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Register a new user (client or therapist).
        /// </summary>
        /// <param name="body"></param>
        /// <response code="201">User registered successfully.</response>
        /// <response code="400">Invalid input.</response>
        [HttpPost]
        [Route("/api/v1/auth/register")]
        [ValidateModelState]
        [SwaggerOperation("AuthRegisterPost")]
        public virtual IActionResult AuthRegisterPost([FromBody]AuthRegisterBody body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Add an emotion journal entry.
        /// </summary>
        /// <param name="body"></param>
        /// <param name="id"></param>
        /// <response code="201">Journal entry added successfully.</response>
        /// <response code="404">Client not found.</response>
        [HttpPost]
        [Route("/api/v1/clients/{id}/journals")]
        [ValidateModelState]
        [SwaggerOperation("ClientsIdJournalsPost")]
        public virtual IActionResult ClientsIdJournalsPost([FromBody]IdJournalsBody body, [FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get a list of mapped therapists.
        /// </summary>
        /// <param name="id"></param>
        /// <response code="200">List of therapists.</response>
        /// <response code="404">Client not found.</response>
        [HttpGet]
        [Route("/api/v1/clients/{id}/therapists")]
        [ValidateModelState]
        [SwaggerOperation("ClientsIdTherapistsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<InlineResponse200>), description: "List of therapists.")]
        public virtual IActionResult ClientsIdTherapistsGet([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<InlineResponse200>));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"therapistId\" : \"therapistId\",\n  \"name\" : \"name\"\n}, {\n  \"therapistId\" : \"therapistId\",\n  \"name\" : \"name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<InlineResponse200>>(exampleJson)
                        : default(List<InlineResponse200>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Send a message to a therapist.
        /// </summary>
        /// <param name="body"></param>
        /// <param name="id"></param>
        /// <param name="therapistId"></param>
        /// <response code="201">Message sent successfully.</response>
        /// <response code="404">Client or Therapist not found.</response>
        [HttpPost]
        [Route("/api/v1/clients/{id}/therapists/{therapistId}/message")]
        [ValidateModelState]
        [SwaggerOperation("ClientsIdTherapistsTherapistIdMessagePost")]
        public virtual IActionResult ClientsIdTherapistsTherapistIdMessagePost([FromBody]TherapistIdMessageBody body, [FromRoute][Required]string id, [FromRoute][Required]string therapistId)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Run keyword search across customers, notes, and journals.
        /// </summary>
        /// <param name="keyword"></param>
        /// <response code="200">Search results.</response>
        /// <response code="404">No results found.</response>
        [HttpGet]
        [Route("/api/v1/search")]
        [ValidateModelState]
        [SwaggerOperation("SearchGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<InlineResponse2003>), description: "Search results.")]
        public virtual IActionResult SearchGet([FromQuery][Required()]string keyword)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<InlineResponse2003>));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"id\" : \"id\",\n  \"type\" : \"customer\",\n  \"content\" : \"content\"\n}, {\n  \"id\" : \"id\",\n  \"type\" : \"customer\",\n  \"content\" : \"content\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<InlineResponse2003>>(exampleJson)
                        : default(List<InlineResponse2003>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get a list of mapped clients.
        /// </summary>
        /// <param name="id"></param>
        /// <response code="200">List of clients.</response>
        /// <response code="404">Therapist not found.</response>
        [HttpGet]
        [Route("/api/v1/therapists/{id}/clients")]
        [ValidateModelState]
        [SwaggerOperation("TherapistsIdClientsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<InlineResponse2001>), description: "List of clients.")]
        public virtual IActionResult TherapistsIdClientsGet([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<InlineResponse2001>));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"clientId\" : \"clientId\",\n  \"name\" : \"name\"\n}, {\n  \"clientId\" : \"clientId\",\n  \"name\" : \"name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<InlineResponse2001>>(exampleJson)
                        : default(List<InlineResponse2001>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// View journal entries for a specific client.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="clientId"></param>
        /// <response code="200">List of journal entries for the client.</response>
        /// <response code="404">Therapist or Client not found.</response>
        [HttpGet]
        [Route("/api/v1/therapists/{id}/journals/{clientId}")]
        [ValidateModelState]
        [SwaggerOperation("TherapistsIdJournalsClientIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<InlineResponse2002>), description: "List of journal entries for the client.")]
        public virtual IActionResult TherapistsIdJournalsClientIdGet([FromRoute][Required]string id, [FromRoute][Required]string clientId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<InlineResponse2002>));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"intensity\" : 0,\n  \"emotion\" : \"Happiness\",\n  \"timestamp\" : \"timestamp\"\n}, {\n  \"intensity\" : 0,\n  \"emotion\" : \"Happiness\",\n  \"timestamp\" : \"timestamp\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<InlineResponse2002>>(exampleJson)
                        : default(List<InlineResponse2002>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add notes for a client session.
        /// </summary>
        /// <param name="body"></param>
        /// <param name="id"></param>
        /// <response code="201">Notes added successfully.</response>
        /// <response code="404">Therapist or Client not found.</response>
        [HttpPost]
        [Route("/api/v1/therapists/{id}/notes")]
        [ValidateModelState]
        [SwaggerOperation("TherapistsIdNotesPost")]
        public virtual IActionResult TherapistsIdNotesPost([FromBody]IdNotesBody body, [FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Modify details of a specific session.
        /// </summary>
        /// <param name="body"></param>
        /// <param name="id"></param>
        /// <param name="sessionId"></param>
        /// <response code="200">Session details updated successfully.</response>
        /// <response code="404">Therapist or Session not found.</response>
        [HttpPut]
        [Route("/api/v1/therapists/{id}/sessions/{sessionId}")]
        [ValidateModelState]
        [SwaggerOperation("TherapistsIdSessionsSessionIdPut")]
        public virtual IActionResult TherapistsIdSessionsSessionIdPut([FromBody]SessionsSessionIdBody body, [FromRoute][Required]string id, [FromRoute][Required]string sessionId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }
    }
}
